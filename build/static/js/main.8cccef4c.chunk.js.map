{"version":3,"sources":["services/utils.js","pages/BoardGame.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["utilService","getRandomInt","min","max","Math","ceil","floor","random","makeId","length","text","possible","i","charAt","BoardGame","selectedElCell","useRef","blackPlayer","whitePlayer","moves","setMoves","useState","board","setBoard","buttonText","setButtomText","msg","setMsg","player","setCurrPlayer","buildBoard","j","movePiece","from","to","copyMoves","push","copyBoard","piece","boardSize","clearMarkCell","document","querySelectorAll","forEach","elTd","classList","remove","getPossibleCells","cellI","cellJ","diff","res","markCells","coords","console","log","cell","querySelector","add","useEffect","_jsxs","className","children","_jsx","onClick","restartGame","undo","setTimeout","lastMove","undoMove","pop","redo","style","color","map","tdId","ev","onClickCell","contains","possibleCells","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8cccef4c.chunk.js","sourcesContent":["export const utilService = {\r\n    getRandomInt,\r\n    makeId\r\n}\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nfunction makeId(length=3) {\r\n    var text = \"\";\r\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    for (var i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n\r\n    return text;\r\n}","import { useEffect, useState } from 'react'\r\nimport { utilService } from '../services/utils';\r\nimport { useRef } from 'react';\r\nimport {Animated } from 'react-animated-css'\r\n\r\n\r\nexport function BoardGame() {\r\n    const boardSize = 8;\r\n    var selectedElCell = null\r\n    const cellRef = useRef(null);\r\n    const blackPlayer = '⚫️';\r\n    const whitePlayer = '⚪️';\r\n    const [moves,setMoves]=useState([]);\r\n    const [board, setBoard] = useState([]);\r\n    const [buttonText, setButtomText] = useState('Start Game')\r\n    const [msg, setMsg] = useState('')\r\n    const [player, setCurrPlayer] = useState(blackPlayer)\r\n    const buildBoard = () => {\r\n\r\n        let board = [];\r\n        for (let i = 0; i < boardSize; i++) {\r\n            board[i] = [];\r\n            for (let j = 0; j < boardSize; j++) {\r\n                if (i < 3 && ((i + j) % 2 == 1)) {\r\n                    board[i][j] = whitePlayer\r\n                }\r\n                else if (i > 4 && ((i + j) % 2 == 1)) {\r\n\r\n                    board[i][j] = blackPlayer\r\n                }\r\n                else board[i][j] = '';\r\n            }\r\n        }\r\n        setBoard(board)\r\n\r\n    }\r\n    const onClickCell = (i, j) => {\r\n        console.log('ij',i,j);\r\n        console.log(board[i][j]);\r\n        console.log('player',player);\r\n        if (board[i][j] !== player && board[i][j]!='') {\r\n            setMsg(`Its Not  ${board[i][j]} turn !`)\r\n            setTimeout(() => {\r\n                setMsg('')\r\n            }, 2000)\r\n            return;\r\n        }\r\n        var elCell = document.querySelector(`#cell-${i}-${j}`);\r\n        if (elCell.classList.contains('mark')) {\r\n            movePiece(selectedElCell, { i, j });\r\n            clearMarkCell();\r\n            return;\r\n        }\r\n        clearMarkCell();\r\n        if (board[i][j] !== '') {\r\n            var elCell = document.querySelector(`#cell-${i}-${j}`);\r\n            elCell.classList.add('selected')\r\n            selectedElCell = { i, j }\r\n            var possibleCells = getPossibleCells(i, j);\r\n            markCells(possibleCells)\r\n        }\r\n    }\r\n  const undoMove=(from, to)=>{\r\n    const copyMoves=[...moves];\r\n    setMoves(copyMoves)\r\n    const copyBoard = [...board]\r\n    var piece = copyBoard[from.i][from.j];\r\n    if(piece=='🏴')piece=blackPlayer;\r\n    else if(piece=='🏳️')piece=whitePlayer;\r\n    copyBoard[from.i][from.j] = '';\r\n    copyBoard[to.i][to.j] = piece;\r\n  }\r\n\r\n\r\n    const movePiece = (from, to) => {\r\n        const copyMoves=[...moves];\r\n        copyMoves.push({from:{i:from.i,j:from.j,player:player},to:{i:to.i,j:to.j}});\r\n        setMoves(copyMoves)\r\n        const copyBoard = [...board]\r\n        var piece = copyBoard[from.i][from.j];\r\n        copyBoard[from.i][from.j] = '';\r\n        copyBoard[to.i][to.j] = piece;\r\n\r\n        if (player == blackPlayer) {\r\n            if (to.i === 0 && to.j % 2 === 1) copyBoard[to.i][to.j] = ' 🏴'\r\n            if (copyBoard[from.i - 1][from.j + 1] == whitePlayer && to.j == from.j + 1 || to.j == from.j + 2) copyBoard[from.i - 1][from.j + 1] = ''\r\n            else if (copyBoard[from.i - 1][from.j - 1] == whitePlayer && to.j == from.j - 1 || to.j == from.j - 2) copyBoard[from.i - 1][from.j - 1] = ''\r\n        }\r\n        else if (player == whitePlayer) {\r\n            if (to.i === boardSize - 1 && to.j % 2 === 0) copyBoard[to.i][to.j] = '🏳️'\r\n            if (copyBoard[from.i + 1][from.j - 1] == blackPlayer && to.j == from.j - 1 || to.j == from.j - 2) copyBoard[from.i + 1][from.j - 1] = ''\r\n            else if (copyBoard[from.i + 1][from.j + 1] == blackPlayer && to.j == from.j + 1 || to.j == from.j + 2) copyBoard[from.i + 1][from.j + 1] = ''\r\n        }\r\n        setBoard(copyBoard)\r\n        if (player == blackPlayer) setCurrPlayer(whitePlayer)\r\n        else setCurrPlayer(blackPlayer)\r\n\r\n    }\r\n    const undo=()=>{\r\n        const copyMoves=[...moves]\r\n        if(copyMoves.length===0){\r\n            setMsg('There were no movements yet')\r\n            setTimeout(()=>{\r\n                setMsg('')\r\n            },2500)\r\n            return;\r\n        }\r\n        let lastMove=copyMoves[copyMoves.length-1];\r\n        if(board[lastMove.from.i][lastMove.from.j]=='')undoMove(lastMove.to,lastMove.from)\r\n        copyMoves.pop()\r\n        setMoves(copyMoves)\r\n        \r\n        \r\n    }\r\n    const redo=()=>{\r\n        var res=[];\r\n        var diff = (player == blackPlayer) ? -1 : 1;\r\n        for(let i=0;i<board.length;i++){\r\n            for(let j=0;j<board[0].length;j++){\r\n                if(board[i][j]===player){\r\n                    if ((i + diff < 0 || i + diff > boardSize) || (j + 1 < 0 || j + 1 > boardSize)) continue;\r\n                    if((board[i + diff][j + 1] === '') || board[i + diff][j - 1] === '') {\r\n                        var from={i,j}\r\n                        res=getPossibleCells(i,j)\r\n                    } \r\n\r\n                }\r\n            }\r\n        }\r\n        movePiece(from,res[utilService.getRandomInt(0,res.length)])\r\n    }\r\n    const clearMarkCell = () => {\r\n        //change to useRef\r\n        var elTds = document.querySelectorAll('.mark, .selected');\r\n        elTds.forEach((elTd) => {\r\n            elTd.classList.remove('mark', 'selected');\r\n\r\n        })\r\n    }\r\n    const getPossibleCells = (cellI, cellJ) => {\r\n        const copyBoard = [...board];\r\n        var diff = (copyBoard[cellI][cellJ] == blackPlayer) ? -1 : 1;\r\n        var res = [];\r\n        if ((cellI + diff < 0 || cellI + diff > boardSize) || (cellJ + 1 < 0 || cellJ + 1 > boardSize)) return;\r\n        if (copyBoard[cellI + diff][cellJ + 1] === '') {\r\n            res.push({ i: cellI + diff, j: cellJ + 1 })\r\n        }\r\n        if (copyBoard[cellI + diff][cellJ - 1] === '') res.push({ i: cellI + diff, j: cellJ - 1 })\r\n        if (player == blackPlayer) {\r\n            if (copyBoard[cellI + diff][cellJ + 1] == whitePlayer) {\r\n                if ((!(cellI - 2 < 0)) && (!(cellJ + 2 < 0 || cellJ + 2 >= boardSize))) {\r\n                    if (copyBoard[cellI - 2][cellJ + 2] == '') res.push({ i: cellI - 2, j: cellJ + 2 })\r\n                }\r\n            }\r\n            else if (copyBoard[cellI + diff][cellJ - 1] == whitePlayer) {\r\n                if ((!(cellI - 2 < 0)) && (!(cellJ - 2 < 0))) {\r\n                    if (copyBoard[cellI - 2][cellJ - 2] == '') res.push({ i: cellI - 2, j: cellJ - 2 })\r\n                }\r\n            }\r\n        }\r\n        else if (player == whitePlayer) {\r\n            if (copyBoard[cellI + diff][cellJ + 1] == blackPlayer) {\r\n                if ((!(cellI + 2 >= boardSize)) && (!(cellJ + 2 > BoardGame))) {\r\n                    if (copyBoard[cellI + 2][cellJ + 2] == '') res.push({ i: cellI + 2, j: cellJ + 2 })\r\n                }\r\n\r\n            } else if (copyBoard[cellI + diff][cellJ - 1] == blackPlayer) {\r\n                if ((!(cellI + 2 >= boardSize)) && (!(cellJ - 2 < 0))) {\r\n                    if (copyBoard[cellI + 2][cellJ - 2] == '') res.push({ i: cellI + 2, j: cellJ - 2 })\r\n                }\r\n            }\r\n        }\r\n    return res\r\n}\r\nconst markCells = (coords) => {\r\n    console.log(coords);\r\n    if (coords?.length > 0) {\r\n        coords.forEach(cell => {\r\n            var elCell = document.querySelector(`#cell-${cell.i}-${cell.j}`);\r\n            elCell.classList.add('mark')\r\n\r\n        })\r\n    }\r\n\r\n}\r\nconst restartGame = () => {\r\n    setMsg('');\r\n    selectedElCell = null\r\n    setCurrPlayer(blackPlayer);\r\n    setBoard([]);\r\n    setMoves([]);\r\n    buildBoard();\r\n}\r\n\r\nuseEffect(() => {\r\n    buildBoard()\r\n}, [])\r\n\r\nif (!board) return <h1>Loading board...</h1>\r\nreturn (\r\n    <div className=\"board flex column\">\r\n        <div className=\"flex align-center space-around\">\r\n        <h2>player Turn : {player}</h2>\r\n        <button className=\"simple-btn\" onClick={restartGame}>restart Game</button>\r\n        <button className=\"undo-btn\" onClick={undo}>Undo</button>\r\n        <button className=\"undo-btn\" onClick={redo}>Redo</button>\r\n        </div>\r\n        <span style={{ color: 'red' }}>{msg}</span>\r\n   \r\n        <table>\r\n            <tbody>\r\n                {board.map((cellI, i) => {\r\n                    return <tr key={i}>\r\n                        {board[0].map((cellJ, j) => {\r\n                            var tdId = `cell-${i}-${j}`;\r\n                            return <td onClick={(ev) => onClickCell(i, j)} id={tdId} className={((i + j) % 2 === 0) ? 'blue' : 'white'} key={utilService.makeId()}>{board[i][j]}</td>\r\n                        })}\r\n                    </tr>\r\n                })}\r\n\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n)\r\n}","import './assets/styles/styles.scss'\nimport { BoardGame } from './pages/BoardGame';\n\nfunction App() {\n  return (\n    <div className=\"App flex align-center space-around column\">\n      <BoardGame/>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}